package Software_Development;

import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.Month;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author JingXuan
 */
public class Resident_Payment extends javax.swing.JFrame {

    private int userId;

    public Resident_Payment(int userId) {
        initComponents();
        this.userId = userId;
    }

    private String selectedMonth;
    private Connection connection;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UpperWhiteBar = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        Background = new javax.swing.JPanel();
        GeneratePaymentRecord = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        user_Id = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        sendreminder = new javax.swing.JButton();
        LowerWhiteBar1 = new javax.swing.JPanel();
        Resident1 = new javax.swing.JButton();
        Account1 = new javax.swing.JButton();
        Search1 = new javax.swing.JButton();
        Home = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        UpperWhiteBar.setBackground(new java.awt.Color(255, 255, 255));
        UpperWhiteBar.setPreferredSize(new java.awt.Dimension(363, 65));

        Title.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        Title.setText("Payment Info");

        javax.swing.GroupLayout UpperWhiteBarLayout = new javax.swing.GroupLayout(UpperWhiteBar);
        UpperWhiteBar.setLayout(UpperWhiteBarLayout);
        UpperWhiteBarLayout.setHorizontalGroup(
            UpperWhiteBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpperWhiteBarLayout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(Title)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UpperWhiteBarLayout.setVerticalGroup(
            UpperWhiteBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpperWhiteBarLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(Title)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        Background.setBackground(new java.awt.Color(153, 153, 153));

        GeneratePaymentRecord.setBackground(new java.awt.Color(235, 235, 235));
        GeneratePaymentRecord.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        GeneratePaymentRecord.setText("Generate Payment Record");
        GeneratePaymentRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneratePaymentRecordActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Jan", "Feb", "Mar", "Apr", "May", "Jun"
            }
        ));
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Jan");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Feb");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Mar");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("Apr");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("May");
            jTable1.getColumnModel().getColumn(5).setHeaderValue("Jun");
        }

        jLabel1.setText("User Id:");

        user_Id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user_IdActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel2.setText("1 = Payed");

        jLabel3.setText("0 = Unpayed");

        sendreminder.setText("Send Reminder");
        sendreminder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendreminderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BackgroundLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(user_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackgroundLayout.createSequentialGroup()
                                .addComponent(GeneratePaymentRecord)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 55, Short.MAX_VALUE)
                                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackgroundLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sendreminder)))
                .addContainerGap())
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackgroundLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(user_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GeneratePaymentRecord)
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sendreminder)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        LowerWhiteBar1.setBackground(new java.awt.Color(255, 255, 255));
        LowerWhiteBar1.setPreferredSize(new java.awt.Dimension(0, 57));

        Resident1.setBackground(new java.awt.Color(235, 235, 235));
        Resident1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        Resident1.setText("Visitor");
        Resident1.setPreferredSize(new java.awt.Dimension(83, 45));
        Resident1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resident1ActionPerformed(evt);
            }
        });

        Account1.setBackground(new java.awt.Color(235, 235, 235));
        Account1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        Account1.setText("Account");
        Account1.setPreferredSize(new java.awt.Dimension(83, 45));
        Account1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Account1ActionPerformed(evt);
            }
        });

        Search1.setBackground(new java.awt.Color(235, 235, 235));
        Search1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        Search1.setText("Resident");
        Search1.setPreferredSize(new java.awt.Dimension(83, 45));
        Search1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Search1ActionPerformed(evt);
            }
        });

        Home.setBackground(new java.awt.Color(235, 235, 235));
        Home.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        Home.setText("Home");
        Home.setPreferredSize(new java.awt.Dimension(83, 45));
        Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LowerWhiteBar1Layout = new javax.swing.GroupLayout(LowerWhiteBar1);
        LowerWhiteBar1.setLayout(LowerWhiteBar1Layout);
        LowerWhiteBar1Layout.setHorizontalGroup(
            LowerWhiteBar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LowerWhiteBar1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Account1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Search1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Resident1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );
        LowerWhiteBar1Layout.setVerticalGroup(
            LowerWhiteBar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LowerWhiteBar1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LowerWhiteBar1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Resident1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Account1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LowerWhiteBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(UpperWhiteBar, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(UpperWhiteBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LowerWhiteBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Resident1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resident1ActionPerformed
        // TODO add your handling code here:
        Manager_VisitorInfo account = new Manager_VisitorInfo(userId);
        account.setVisible(true);
        dispose();
    }//GEN-LAST:event_Resident1ActionPerformed

    private void Account1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Account1ActionPerformed
        Resident_Account account = new Resident_Account(userId);
        account.setVisible(true);
        dispose();
    }//GEN-LAST:event_Account1ActionPerformed

    private void Search1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Search1ActionPerformed
        Resident_Search search = new Resident_Search(userId);
        search.setVisible(true);
        dispose();
    }//GEN-LAST:event_Search1ActionPerformed

    private void HomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeActionPerformed
        Manager_Home acc = new Manager_Home(userId);
        acc.setVisible(true);
        dispose();
    }//GEN-LAST:event_HomeActionPerformed

    private void GeneratePaymentRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneratePaymentRecordActionPerformed
        // Retrieve the unit number entered by the user
        String user_id = user_Id.getText();
        //String unit_no = unitNo.getText();
        // Clear the table before populating it with new data
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);

        // Establish the database connection
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aps", "root", "")) {
            // Prepare the SQL query
            String sql = "SELECT January, February, March, April, May, June, July, August, September, October, November, December FROM resident_bills WHERE user_id = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, user_id);

            // Execute the query
            ResultSet resultSet = statement.executeQuery();

            // Process the query results and populate the table
            while (resultSet.next()) {
                String Jan = resultSet.getString("January");
                String Feb = resultSet.getString("February");
                String Mar = resultSet.getString("March");
                String Apr = resultSet.getString("April");
                String May = resultSet.getString("May");
                String Jun = resultSet.getString("June");
                String Jul = resultSet.getString("July");
                String Aug = resultSet.getString("August");
                String Sep = resultSet.getString("September");
                String Oct = resultSet.getString("October");
                String Nov = resultSet.getString("November");
                String Dec = resultSet.getString("December");

                // Add a new row to the table model
                model.addRow(new Object[]{Jan, Feb, Mar, Apr, May, Jun});
                model2.addRow(new Object[]{Jul, Aug, Sep, Oct, Nov, Dec});
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving data from the database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_GeneratePaymentRecordActionPerformed

    private void saveReminder(String user_id, String message) {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aps", "root", "")) {
            // Prepare the SQL query
            String sql = "INSERT INTO reminder (user_id, message) VALUES (?, ?)";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, user_id);
            statement.setString(2, message);

            // Execute the query
            int rowsAffected = statement.executeUpdate();

            if (rowsAffected > 0) {
                // Successfully saved the reminder
                System.out.println("Reminder sent successfully!");
            } else {
                // Failed to save the reminder
                System.out.println("Failed to save the reminder.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error saving the reminder: " + e.getMessage());
        }
    }

    private void sendreminderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendreminderActionPerformed

        // Retrieve the user_id from the userid field
        String user_id = user_Id.getText();
        Month currentMonth = LocalDate.now().getMonth();

        // Establish the database connection
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/aps", "root", "")) {
            // Prepare the SQL query
            String sql = "SELECT January, February, March, April, May, June, July, August, September, October, November, December "
                    + "FROM resident_bills "
                    + "WHERE user_id = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setString(1, user_id);

            // Execute the query
            ResultSet resultSet = statement.executeQuery();

            // Process the query results and generate the message
            StringBuilder messageBuilder = new StringBuilder();
            boolean hasUnpaidBills = false;

            if (resultSet.next()) {
                String[] months = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
                for (String month : months) {
                    int billStatus = resultSet.getInt(month);
                    
                    // check if the current month has been reached
                    if (Month.valueOf(month.toUpperCase()) == currentMonth) {
                        //messageBuilder.append(month);
                        break;
                    }
                    if (billStatus == 0) {
                        
                        messageBuilder.append(month).append(", ");
                        hasUnpaidBills = true;
                    }
                }
            }

            // Remove the trailing comma and space from the message
            String message = messageBuilder.toString().trim();
            if (message.endsWith(",")) {
                message = message.substring(0, message.length() - 1);
            }

            if (hasUnpaidBills) {
                // Save the message and user_id into the reminder table
                saveReminder(user_id, message);

                // Display a success message
                JOptionPane.showMessageDialog(this, "Reminder sent successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Display a message indicating no unpaid bills
                JOptionPane.showMessageDialog(this, "No unpaid bills found.", "No Unpaid Bills", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving data from the database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_sendreminderActionPerformed

    private void user_IdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user_IdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user_IdActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Resident_Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Resident_Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Resident_Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Resident_Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            int userId = 123;

            public void run() {

                new Resident_Payment(userId).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Account1;
    private javax.swing.JPanel Background;
    private javax.swing.JButton GeneratePaymentRecord;
    private javax.swing.JButton Home;
    private javax.swing.JPanel LowerWhiteBar1;
    private javax.swing.JButton Resident1;
    private javax.swing.JButton Search1;
    private javax.swing.JLabel Title;
    private javax.swing.JPanel UpperWhiteBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton sendreminder;
    private javax.swing.JTextField user_Id;
    // End of variables declaration//GEN-END:variables
}
